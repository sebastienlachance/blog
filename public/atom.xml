<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sebastien Lachance]]></title>
  <link href="http://sebastienlachance.com/atom.xml" rel="self"/>
  <link href="http://sebastienlachance.com/"/>
  <updated>2012-05-10T09:39:35-04:00</updated>
  <id>http://sebastienlachance.com/</id>
  <author>
    <name><![CDATA[Sebastien Lachance]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Assets Pipeline and missing assets]]></title>
    <link href="http://sebastienlachance.com/blog/rails-assets-pipeline-and-missing-assets/"/>
    <updated>2012-05-10T10:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/rails-assets-pipeline-and-missing-assets</id>
    <content type="html"><![CDATA[<p>I moved the entire <a href="http://www.guidedescommercesdebeauce.com">Guide des Commerces</a> from Rails 3.0.10 to Rails 3.2.3. I have to admit it, I was afraid of the assets pipeline and my first deployment attempt resulted in a lost afternoon and a bad case of stress. I had to revert back and lose some customer data (just my associate data).</p>

<p>The problem was that I tried to use the assets pipeline for half the application and let everything in the public folder for the second half (admin part). I&#8217;m pretty sure it is possible.</p>

<p>Now everything is moved and I am actually quite happy. One css and one js per page is finally a dream came true.</p>

<p>Anyway, what I really wanted to talk here is about one of the problems I had. When calling the assets precompile rake task, one compiled css file was missing. Like one of the manifest wasn&#8217;t read or executed.</p>

<p>When you have multiple manifest files (not called application.css or application.js), you actually have to tell which additionnal one to precompile.</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;administration.js&#39;</span><span class="p">,</span> <span class="s1">&#39;administration.css&#39;</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>One gotcha with scss manifest:</h2>

<p><strong>If you are using scss files as manifests</strong>, you need to use the compiled version.</p>

<p>Like this:</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;application.css&#39;</span> <span class="o">]</span>  <span class="c1"># this will not work, but no error will be thrown</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of:</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;application.css.scss&#39;</span> <span class="o">]</span>  <span class="c1"># this will not work, but no error will be thrown</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method decorators in Ruby]]></title>
    <link href="http://sebastienlachance.com/blog/method-decorators-in-ruby/"/>
    <updated>2012-05-01T08:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/method-decorators-in-ruby</id>
    <content type="html"><![CDATA[<p>While I was following the <a href="http://twitter.com/#!/search/%23railsconf">#railsconf</a> thread on Twitter, I heard some talking about method decorators with Ruby. I&#8217;ve always wondered if there was a way to emulate the <a href="http://www.codeguru.com/csharp/.net/article.php/c18741/Understanding-and-Using-NET-Attributes.htm">Attribute</a> we have in .NET.</p>

<p>Turns out it is possible (and with added value!). Using the <a href="https://github.com/michaelfairley/method_decorators">method_decorators gem</a> allow precisely that functionnality with some extras.</p>

<h2>Defining a decorator</h2>

<figure class='code'><figcaption><span>Defining a decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ADecorator</span> <span class="o">&lt;</span> <span class="no">MethodDecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">orig</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">orig</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This decorator actually does nothing, since we call the original method with supplied arguments and block (if provided).</p>

<h2>Using the decorator</h2>

<figure class='code'><figcaption><span>Using the decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AClass</span>
</span><span class='line'>  <span class="n">extends</span> <span class="no">MethodDecorators</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">+</span><span class="no">ADecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_something</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now do something before and after the call to  <strong>do_something</strong> and even modify the return value.</p>

<h2>A practical example</h2>

<p>I&#8217;ve had this little problem in .NET where I wanted to profile different method calls to see how much time they took to execute and send back the result via <a href="http://miniprofiler.com/">MiniProfiler</a>. For this, I wanted only to add an attribute to those methods. The only way I have found that possible without the use of an advanced profiling tool was to use <a href="http://www.sharpcrafters.com/postsharp/features">PostSharp</a> and it&#8217;s injecting code feature. The Attribute functionnality does not offer any kind of before and after hook on execution.</p>

<p>A custom implementation would look like this.</p>

<figure class='code'><figcaption><span>MiniProfiler Attribute with PostSharp and C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[Serializable]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProfilingAspectAttribute</span> <span class="p">:</span> <span class="n">OnMethodBoundaryAspect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">IDisposable</span> <span class="n">_profiler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">ProfilingAspectAttribute</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="nf">OnEntry</span><span class="p">(</span><span class="n">MethodExecutionArgs</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_profiler</span> <span class="p">=</span> <span class="n">MiniProfiler</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Step</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}.{1}&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="n">args</span><span class="p">.</span><span class="n">Method</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">Method</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="nf">OnExit</span><span class="p">(</span><span class="n">MethodExecutionArgs</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_profiler</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">_profiler</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>      <span class="n">_profiler</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PostSharp will inject the OnEntry and OnExit code at the start and at the end of the &#8220;decorated&#8221; method. By default, <strong>there is no way to achieve that easily</strong>.</p>

<p>With Ruby, the method_decorators gem and a custom profiler, it would look like this.</p>

<figure class='code'><figcaption><span>A custom profiling decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Profiling</span> <span class="o">&lt;</span> <span class="no">MethodDecorator</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">orig</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profiler</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="n">orig</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profiler</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">+</span><span class="no">Profiling</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method_to_be_profiled</span>
</span><span class='line'>    <span class="c1">#some complex calculations</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How nice is that?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Rails : assert_valid_keys]]></title>
    <link href="http://sebastienlachance.com/blog/learning-rails-assert-valid-keys/"/>
    <updated>2012-04-30T06:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/learning-rails-assert-valid-keys</id>
    <content type="html"><![CDATA[<p>While reading the source code of <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a>, I came accross this method and tried to find where in FactoryGirl it was defined.
Turns out it&#8217;s in Rails since version 3.0 (more specifically in active_support/core_ext/hash/keys).</p>

<p>It&#8217;s an instance method of the Hash class, and what it allows you to do is to throw an ArgumentError when an unknown key is found on the hash instance.</p>

<figure class='code'><figcaption><span>valid keys</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;joe&quot;</span><span class="p">,</span> <span class="ss">:phone</span> <span class="o">=&gt;</span> <span class="s1">&#39;555-5555&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">assert_valid_keys</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;joe&quot;</span><span class="p">,</span><span class="ss">:phone</span><span class="o">=&gt;</span><span class="s1">&#39;555-5555&#39;</span><span class="p">}</span>  <span class="c1"># no ArgumentError</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>missing key in hash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;joe&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">assert_valid_keys</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;joe&quot;</span><span class="p">}</span>  <span class="c1"># no ArgumentError</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>unknown key in hash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;joe&quot;</span><span class="p">,</span> <span class="ss">:phone</span> <span class="o">=&gt;</span> <span class="s1">&#39;555-5555&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">assert_valid_keys</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="no">ArgumentError</span><span class="p">:</span> <span class="no">Unknown</span> <span class="n">key</span><span class="p">:</span> <span class="n">phone</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://api.rubyonrails.org/classes/Hash.html#method-i-assert_valid_keys">assert_valid_keys</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone and page transition]]></title>
    <link href="http://sebastienlachance.com/blog/backbone-and-page-transition/"/>
    <updated>2012-04-27T17:02:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/backbone-and-page-transition</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Large-scale Javascript Application Architecture by Addy Osmani]]></title>
    <link href="http://sebastienlachance.com/blog/large-scale-javascript-application-architecture-by-addy-osmani/"/>
    <updated>2012-04-27T08:18:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/large-scale-javascript-application-architecture-by-addy-osmani</id>
    <content type="html"><![CDATA[<p>Sometime, great stuff just fall from sky. And this presentation is just what I needed. <a href="http://speakerdeck.com/u/addyosmani">Addy Osmani</a> (AOL) has made a presentation about <a href="http://speakerdeck.com/u/addyosmani/p/scaling-your-javascript-applications">large-scale javascript application architecture</a> and has made his slides public on <a href="http://speakerdeck.com/">Speaker Deck</a> (which by the way is great).</p>

<script async class="speakerdeck-embed" data-id="4ec3f44095903900510005cf" data-ratio="1.3333333333333333" src="http://sebastienlachance.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and nested classes]]></title>
    <link href="http://sebastienlachance.com/blog/ruby-and-nested-classes/"/>
    <updated>2012-04-24T07:45:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/ruby-and-nested-classes</id>
    <content type="html"><![CDATA[<h2>What does it looks like?</h2>

<pre><code>class Book
    class Page
    end
end
</code></pre>

<h2>What is the purpose of nested classes?</h2>

<p>It is useful when we want to group classes together instead of trying to keep them distinct. It make no sense in this example to have a standalone Page class without the Book class.</p>

<h2>How can we instantiate Page class?</h2>

<p>If we try to instantiate it normally:</p>

<pre><code>page = Page.new // will throw Uninitialized constant error
</code></pre>

<p>We get: Uninitialized constant Object::Page</p>

<p>Instead we need to use:</p>

<pre><code>page = Book::Page.new
</code></pre>

<h2>But why using :: ?</h2>

<p>Using :: is a way to access constant. Does it make sense? Yes, because nested classes are stored in constant from within the class.</p>

<pre><code>class A
    B = "A constant"
end
</code></pre>

<p>A::B will return &#8220;A constant&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What can we do with Enumerable#Inject?]]></title>
    <link href="http://sebastienlachance.com/blog/what-can-we-do-with-array-dot-inject/"/>
    <updated>2012-04-24T06:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/what-can-we-do-with-array-dot-inject</id>
    <content type="html"><![CDATA[<p>Combine all elements of an enumerable with the supplied block (or symbol)</p>

<pre><code>[1, 3, 5, 10].inject { |sum, el| sum + el }
</code></pre>

<p>What is happenning behid the scene is this:</p>

<pre><code>1 + 3  # 1. 
4 + 5  # 2. The value of the precedent operation is passed back into the block as the first argument.
9 + 10 # 3. And so on.
</code></pre>

<p>   #The result will be 19.</p>

<p>You can also pass an ininial value like this:</p>

<pre><code>[1,2,3].inject(10) { |sum, el| sum + el }

10 + 1
11 + 2
13 + 3
The result will be 16.
You can see it as (((10 + 1) + 2) + 3).
</code></pre>

<p>The initial value will serve as the first argument of the block.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterate over each line of a string in C#]]></title>
    <link href="http://sebastienlachance.com/blog/iterate-over-each-line-of-a-string-in-c-sharp/"/>
    <updated>2012-04-17T07:53:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/iterate-over-each-line-of-a-string-in-c-sharp</id>
    <content type="html"><![CDATA[<p>For future reference.</p>

<p>Easy way to go through each line of a string.</p>

<figure class='code'><figcaption><span>string iteration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">StringReader</span> <span class="n">reader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="p">(</span><span class="n">txt</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">((</span><span class="n">line</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">())</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&quot;do anything with the line);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC ActionLink with image]]></title>
    <link href="http://sebastienlachance.com/blog/asp-dot-net-mvc-actionlink-with-image/"/>
    <updated>2012-04-12T07:49:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/asp-dot-net-mvc-actionlink-with-image</id>
    <content type="html"><![CDATA[<p>It&#8217;s not as hard as it seems. This is a way to create a link with an image.</p>

<figure class='code'><figcaption><span>link to action with an image</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="p">=</span><span class="s">&quot;@Url.Action(&quot;</span><span class="n">Create</span><span class="s">&quot;, &quot;</span><span class="n">LogBooks</span><span class="s">&quot;)&quot;</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="p">=</span><span class="s">&quot;@Url.Content(&quot;</span><span class="p">~/</span><span class="n">Content</span><span class="p">/</span><span class="n">Images</span><span class="p">/</span><span class="n">create</span><span class="p">.</span><span class="n">png</span><span class="s">&quot;)&quot;</span> <span class="p">/&gt;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">a</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Skyrim - A really awesome video]]></title>
    <link href="http://sebastienlachance.com/blog/skyrim-a-really-awesome-video/"/>
    <updated>2012-04-11T06:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/skyrim-a-really-awesome-video</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve played more than a few hours of Skyrim, this is for you&#8230;</p>

<iframe width="853" height="480" src="http://www.youtube.com/embed/ALbQQzePzt4" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Completely unrealistic example - A Backbone Blog]]></title>
    <link href="http://sebastienlachance.com/blog/completely-unrealistic-example-a-backbone-blog/"/>
    <updated>2012-04-10T06:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/completely-unrealistic-example-a-backbone-blog</id>
    <content type="html"><![CDATA[<p>Last week, while I was playing and coding on my Backbone blog project (<a href="https://github.com/sebastienlachance/backbone-rails-blog">backbone-rails-blog</a>), I started wondering if it was something I could use to replace this blog, since I put so much time on it lately. But at the same time I kept telling myself, <strong>is Google going to index the content?</strong> The short answer is: <strong>NO</strong>, not now anyway.</p>

<p>The long answer goes like this: Facebook comments are indexed. So there should be a way to provide this content to GoogleBot. I have done my homework and this document, <a href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started">Making Ajax Applications Crawlable</a>) provides some answers. Basically, we need the <a href="http://en.wikipedia.org/wiki/Shebang_(Unix">hashbang</a>) url format. This is achieved with Backbone when we are not using pushstate.</p>

<p>Hashbang url:</p>

<pre><code>http://sebastienlachance.com#!blog-post
</code></pre>

<p>My urls:</p>

<pre><code>http://sebastienlachacne.com/blog-post
</code></pre>

<p>And frankly, I will not pursue this path. In my case anyway, it provides no real advantages to have an Ajax-powered blog.</p>

<p>In fact, I could have left Backbone and only use it on the admin backend, but as a learning tool, I didn&#8217;t want to revert back (and there is so much great blogging platform now anyway).</p>

<p>Do you have any other web apps ideas (other than a todo list or blog)? In my next iteration (that is, the next app), I will be using Backbone with NodeJs and MongoDB. Sounds fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Available]]></title>
    <link href="http://sebastienlachance.com/blog/available/"/>
    <updated>2012-04-06T15:12:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/available</id>
    <content type="html"><![CDATA[<p>I am now available to do freelance web development. Contract or on site.</p>

<p>I have experience in ASP.NET (MVC or WebForms) and Ruby On Rails. HTML, Javascript and CSS, no problem.</p>

<p>You can see my CV here (<a href="http://sebastienlachance.com/resume">CV</a>).</p>

<p>I can be on site if you are in the area or work remotely (I also have experience in that).</p>

<p>I am looking forward to accept new challenges and deliver WORKING solutions!</p>

<p>You can contact me here (<a href="http://twitter.com/slachance">Twitter</a>), (<a href="http://www.linkedin.com/in/sebastienlachance">LinkedIn</a>) or here (at sebastien.lachance creatiom.com).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disponible pour mandat de développement]]></title>
    <link href="http://sebastienlachance.com/blog/disponible/"/>
    <updated>2012-04-06T13:30:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/disponible</id>
    <content type="html"><![CDATA[<p>Je suis maintenant disponible pour des mandats de développement Web à la pige. Contrat ou sur place.</p>

<p>J&#8217;ai de l&#8217;expérience en ASP.NET (MVC ou WebForms) et Ruby On Rails. HTML, Javascript et CSS, aucun problème.</p>

<p>Vous pouvez consultez mon CV ici (<a href="http://sebastienlachance.com/resume">CV</a>).</p>

<p>Je peux me déplacer si vous êtes dans la région ou travailler à distance (j&#8217;ai aussi de l&#8217;expérience dans ça).</p>

<p>J&#8217;ai très hâte de relever de nouveaux défis et de livrer des solutions qui FONCTIONNENT.</p>

<p>Vous pouvez me contactez ici (<a href="http://twitter.com/slachance">Twitter</a>), ici (<a href="http://www.linkedin.com/in/sebastienlachance">LinkedIn</a>) ou ici (sebastien.lachance at creatiom.com).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rerun all Guards]]></title>
    <link href="http://sebastienlachance.com/blog/rerun-all-guards/"/>
    <updated>2012-03-30T15:16:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/rerun-all-guards</id>
    <content type="html"><![CDATA[<p>I have been searching this feature for a while and never realized it was built-in into Guard. Whenever I tried to rerun all with pressing enter, nothing happened. I didn&#8217;t realized I was because of an old gem version.</p>

<pre><code>Ctrl-r if you are on Guard version &lt; 7
</code></pre>

<p>and</p>

<pre><code>enter if you are on a more recent version
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help needed, A Backbone blog]]></title>
    <link href="http://sebastienlachance.com/blog/help-needed-a-backbone-blog/"/>
    <updated>2012-03-19T12:39:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/help-needed-a-backbone-blog</id>
    <content type="html"><![CDATA[<p>I&#8217;m currently doing my best to learn Backbone and his best practices. I have set up a demo blog application on GitHub (<a href="https://github.com/sebastienlachance/backbone-rails-blog">Backbone-rails-blog</a>).</p>

<p>So, if you are interested to give me some feedback, tips or check out the development progress, just watch the project to see where things are going and I&#8217;ll blog the important parts as I move forward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone - Fetching a single model]]></title>
    <link href="http://sebastienlachance.com/blog/backbone-fetching-a-single-model/"/>
    <updated>2012-03-19T07:50:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/backbone-fetching-a-single-model</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a Backbone driven blog engine (<a href="https://github.com/sebastienlachance/backbone-rails-blog]">Backbone-rails-blog</a>) and had some serious issues with a single functionnality. Retrieving a blog post and displaying it.</p>

<p>First, I&#8217;m still learning Backbone, so don&#8217;t be so harsh on this basic problem.</p>

<p>To retrieve a single model, on your model, you define the url property like this</p>

<figure class='code'><figcaption><span>Post Model - post.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">url</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;/posts/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;permalink&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filling a select from an array on javascript object]]></title>
    <link href="http://sebastienlachance.com/blog/filling-a-select-from-an-array-on-javascript-object/"/>
    <updated>2012-03-13T12:11:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/filling-a-select-from-an-array-on-javascript-object</id>
    <content type="html"><![CDATA[<p>As a reminder for my future self, here is how I fill a select from an array of javascript object.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/z9Q4R/embedded/js,resources,html,css,result/light/"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone - Going through the todo.js example]]></title>
    <link href="http://sebastienlachance.com/blog/backbone-going-through-the-todo-dot-js-example/"/>
    <updated>2012-03-02T08:52:00-05:00</updated>
    <id>http://sebastienlachance.com/blog/backbone-going-through-the-todo-dot-js-example</id>
    <content type="html"><![CDATA[<p>Over the past days, I have been struggling a lot to understand Backbone and how to apply it in other situations than a todo list.</p>

<p>I read and reread and even rewrite the Todo demo application for Backbone. But, If I wanted to redo it, I was lost. No idea where to go after models are created.</p>

<p>So here it is, I wanted to mimic the way I would recreate the way this application would have been created from scratch by a Backbone apprentice like me, one functionnality at a time.</p>

<p>The demo application is using a local storage mechanism, but I provide the way it would have been if it was a rails application.</p>

<p>rails new backbone_todo
rails g scaffold todo text:string done:boolean</p>

<p>Go to Backbone doc site, place backbone.js and underscore.js in app/assets/javascripts</p>

<p>Open application.js and make the following modifications</p>

<p>  //= require underscore
  //= require backbone
  //= require todo</p>

<p>Remove todo.js.coffee if you will not use CoffeeScript.</p>

<p>Open app/views/todos/index.html and put the following html:</p>

<p>  <div id="todoapp"></p>

<pre><code>  &lt;div class="title"&gt;
    &lt;h1&gt;Todos&lt;/h1&gt;
  &lt;/div&gt;

  &lt;div class="content"&gt;

    &lt;div id="create-todo"&gt;
      &lt;input id="new-todo" placeholder="What needs to be done?" type="text" /&gt;
      &lt;span class="ui-tooltip-top" style="display:none;"&gt;Press Enter to save this task&lt;/span&gt;
    &lt;/div&gt;

    &lt;div id="todos"&gt;
      &lt;ul id="todo-list"&gt;&lt;/ul&gt;
    &lt;/div&gt;

    &lt;div id="todo-stats"&gt;&lt;/div&gt;

  &lt;/div&gt;

&lt;/div&gt;

&lt;ul id="instructions"&gt;
  &lt;li&gt;Double-click to edit a todo.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://documentcloud.github.com/backbone/docs/todos.html"&gt;View the annotated source.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id="credits"&gt;
  Created by
  &lt;br /&gt;
  &lt;a href="http://jgn.me/"&gt;J&amp;eacute;r&amp;ocirc;me Gravel-Niquet&lt;/a&gt;
&lt;/div&gt;

&lt;!-- Templates --&gt;

&lt;script type="text/template" id="item-template"&gt;
  &lt;div class="todo {{= done ? 'done' : '' }}"&gt;
    &lt;div class="display"&gt;
      &lt;input class="check" type="checkbox" {{= done ? 'checked="checked"' : '' }} /&gt;
      &lt;div class="todo-text"&gt;&lt;/div&gt;
      &lt;span class="todo-destroy"&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="edit"&gt;
      &lt;input class="todo-input" type="text" value="" /&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;

&lt;script type="text/template" id="stats-template"&gt;
  {{ if (total) { }}
    &lt;span class="todo-count"&gt;
      &lt;span class="number"&gt;{{= remaining }}&lt;/span&gt;
      &lt;span class="word"&gt;{{= remaining == 1 ? 'item' : 'items' }}&lt;/span&gt; left.
    &lt;/span&gt;
  {{ } }}
  {{ if (done) { }}
    &lt;span class="todo-clear"&gt;
      &lt;a href="#"&gt;
        Clear &lt;span class="number-done"&gt;{{= done }}&lt;/span&gt;
        completed &lt;span class="word-done"&gt;{{= done == 1 ? 'item' : 'items' }}&lt;/span&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  {{ } }}
&lt;/script&gt;
</code></pre>

<p>Now let&#8217;s get to the core of backbone.</p>

<ol>
<li>Create a todo</li>
</ol>


<p>In document ready</p>

<p>  $(function() {</p>

<pre><code>//Needed if you use erb with rails
_.templateSettings = {
  interpolate: /\{\{\=(.+?)\}\}/g,
  evaluate: /\{\{(.+?)\}\}/g
};


//code here
</code></pre>

<p>  });</p>

<p>Create a view that represent the application.</p>

<p>  window.AppView = Backbone.View.extend({});</p>

<p>Then we want to react when the user press enter after entering a todo.</p>

<p>  window.AppView = Backbone.View.extend({</p>

<pre><code>el: '#todoapp',

events: function() {
  "keypress #new-todo" : "createOnEnter"
},

createOnEnter: function() {

}
</code></pre>

<p>  });</p>

<p>What we have just done is to create a view that will listen to the keypress event on the element with the id new-todo, and call the function createOnEnter when pressing a key.</p>

<p>The el property (element) will tell the view to which element in the DOM it is binded to. In that case, without the</p>

<p>Creating the elemnt</p>

<p>Add the following method that will be called when creating the view and setting the input property to the correct element.</p>

<p>In window.AppView:</p>

<p>initialize: function() {
  this.input = this.$(&#8216;#new-todo);
}</p>

<p>And then we create the Todos (again in window.AppView)</p>

<p>  createOnEnter : function(e) {</p>

<pre><code>var text = this.input.val();
if (!text || e.keyCode != 13) return;
Todos.create({text: text});
this.input.val();
</code></pre>

<p>  }</p>

<p>Running the code now and trying to enter an item will result in : Uncaught ReferenceError: Todos is not defined</p>

<p>It&#8217;s because we are calling the create method on something that does not yet exists.</p>

<p>Todos is actually a collection of Todo model.</p>

<p>Let&#8217;s define them both in the document ready function</p>

<p>  window.Todo = Backbone.Model.extend({});</p>

<p>There we have created the Todo model.</p>

<p>  window.TodoList = Backbone.Collection.extend({</p>

<pre><code>model: Todo
</code></pre>

<p>  });</p>

<p>  window.Todos = new TodoList();</p>

<p>And now we have create the collection that will hold the Todo models. We started by extending Backbone.Collection and provide Todo as the model of the collection.</p>

<p>Let&#8217;s run the example again:</p>

<p>Now we have : Uncaught Error: A &#8220;url&#8221; property or function must be specified</p>

<p>Ahh, let&#8217;s fix this easily.</p>

<p>  window.TodoList = Backbone.Collection.extend({</p>

<pre><code>model: Todo,
url: '/todos'
</code></pre>

<p>  });</p>

<p>Now it would be great to display the added item in the list.</p>

<p>For this we need to react to the add, reset and all event</p>

<p>In window.AppView the initialize function change for:</p>

<p>  initialize: function() {</p>

<pre><code>this.input = this.$('#new-todo');

Todos.bind('add', this.addOne, this);
Todos.bind('reset', this.addAll, this);
Todos.bind('all', this.render, this);
</code></pre>

<p>  }</p>

<p>In details :</p>

<p>Todos.bind : It is currently deprecated in favor of &#8220;on&#8221; to follow the jQuery direction but still supported for backward compatibility:</p>

<p>{% blockquote
  onobject.on(event, callback, [context]) Alias: bind
%}</p>

<p>The first argument is the event we want to listen, the second is the callback method to be called and the third optional parameters is the context.</p>

<p>We listen to three events:</p>

<ol>
<li>add : Is called when a model is added to the collection</li>
<li>reset : When the whole collection or more than one model is changed (like reloading the collection)</li>
<li>all : Any event</li>
</ol>


<p>Reacting to the add event on collection:</p>

<p>In window.AppView</p>

<p>  addOne: function(todo) {</p>

<pre><code>var view = new TodoView({model: todo});
$('#todo-list').append(view.render().el);
</code></pre>

<p>  },</p>

<p>  addAll: function() {</p>

<pre><code>Todos.each(this.addOne);
</code></pre>

<p>  }</p>

<p>So the addOne callback is going to create a TodoView and add it to #todo-list.</p>

<p>The TodoView:</p>

<p>  window.TodoView = Backbone.View.extend({</p>

<pre><code>tagName: 'li',

template: _.template($('#item-template').html()),

render: function() {
  $(this.el).html(this.template(this.model.toJSON()));
  this.setText();
  return this;
},

setText: function() {
  var text = this.model.get('text');
  this.$('.todo-text').text(text);
  this.input = this.$('.todo-input');
  this.input.val(text);
} 
</code></pre>

<p>  });</p>

<p>First, we extend Backbone.View to create a view. The tagName represent the top element that we will add the Todo content to. In this case it&#8217;s a list element so we use an li tag. Second, the template. Remember in our html, we were having a &lt;script type=&#8221;text/template&#8221;&gt; tag. This is actually a template that we will fill using underscore and our model converted to JSON.</p>

<p>And finally we have the render method, that will use the rendered template and add it to our li element. The model property is automatically assigned when creating the view. The setText method, add the todo text to the display element and the edit element, (more on this later);</p>

<p>Let&#8217;s run it and see for ourselves how it&#8217;s working so far.</p>

<p>ohoh:  Uncaught ReferenceError: done is not defined</p>

<p>We don&#8217;t have any done property on our model.</p>

<p>Open up the Todo model and add some defaults :</p>

<p>window.Todo = Backbone.Model.extend({
  defaults: function() {</p>

<pre><code>return {
  done: false
}
</code></pre>

<p>  }
});</p>

<p>Everythings run fine now.</p>

<p>Let&#8217;s handle the done checkbox.</p>

<p>Add an event to our TodoView to react on the click on checkbox.</p>

<p>  events: {</p>

<pre><code>"click .check": "toggleDone"
</code></pre>

<p>  },</p>

<p>  toggleDone: function() {</p>

<pre><code>this.model.toggle();
</code></pre>

<p>  },</p>

<p>  initialize: function() {</p>

<pre><code>this.model.bind('change', this.render, this);
</code></pre>

<p>  }</p>

<p>And in our Todo model:</p>

<p>  toggle: function() {</p>

<pre><code>this.save({done: !this.get("done")});
</code></pre>

<p>  }</p>

<p>Since we have added code to react to the change event with the render callback, the view will be automatically be rerenderd with the new content. And the template show correctly the done item.</p>

<p>Run it. Warning. : With Rails, you will get Can&#8217;t mass-assign protected attributes: id</p>

<p>One thing that would be great is to actually reload saved todo when we refresh the page.</p>

<p>Easy:</p>

<p>In the initialize function of the AppView ask the Todo collection to fetch itself.</p>

<p>window.AppView = Backbone.View.extend({</p>

<p>  //code</p>

<p>  initialize: function() {</p>

<pre><code>//more code

Todos.fetch();
</code></pre>

<p>  }</p>

<p>  //code</p>

<p>});</p>

<p>Deleting</p>

<p>Add an event to detect the delete button click.</p>

<p>In window.AppView</p>

<p>window.TodoView = Backbone.View.extend({</p>

<p>  //code</p>

<p>  events: {</p>

<pre><code>//code
"click span.todo-destroy", "clear"
</code></pre>

<p>  },</p>

<p>  //code</p>

<p>  intialize: function() {</p>

<pre><code>//code

this.model.bind('destroy', this.remove, this);
</code></pre>

<p>  },</p>

<p>  clear: function() {</p>

<pre><code>this.model.destroy();
</code></pre>

<p>  },</p>

<p>  remove: function() {</p>

<pre><code>$(this.el).remove();
</code></pre>

<p>  }</p>

<p>});</p>

<p>Editing</p>

<p>window.TodoView = Backbone.View.extend({</p>

<p>  //code</p>

<p>  events {</p>

<pre><code>//code    

"dblclick div.todo-text" : "edit",
"keypress .todo-input"   : "updateOnEnter"
</code></pre>

<p>  },</p>

<p>  //code</p>

<p>  edit: function() {</p>

<pre><code>$(this.el).addClass("editing");
this.input.focus();
</code></pre>

<p>  },</p>

<p>  updateOnEnter: function(e) {</p>

<pre><code>if (e.keyCode == 13) this.close();
</code></pre>

<p>  },</p>

<p>  close: function() {</p>

<pre><code>this.model.save({text: this.input.val()});
$(this.el).removeClass("editing");
</code></pre>

<p>  }</p>

<p>});</p>

<p>Adding the class editing, hides the div containing the todo text and show a div containing an text field with the content already been filled (via the template).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting a BlogEngine.Net blog to Octopress]]></title>
    <link href="http://sebastienlachance.com/blog/converting-a-blogengine-dot-net-blog-to-octopress/"/>
    <updated>2012-02-21T12:52:00-05:00</updated>
    <id>http://sebastienlachance.com/blog/converting-a-blogengine-dot-net-blog-to-octopress</id>
    <content type="html"><![CDATA[<p>Some months ago, I moved my BlogEngine.net blog (hosted on GoDaddy) to Octopress hosted on Heroku. I needed a tool to migrate all my posts and found nothing that could apply to my case (I&#8217;m pretty sure there is something out there, but I didn&#8217;t look very far and wanted to code the tool myself anyway).</p>

<p>Octopress blog post format look like this:</p>

<pre><code>---
layout: post
title: "Setting ComVisible"
date: 2005-01-19 14:46:00
comments: true
categories: 
---

** This is my post using Markdown **
</code></pre>

<p>My BlogEngine.Net was configured to use xml files to store posts. Which look like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;
&lt;post&gt;
  &lt;author&gt;SebastienLachance&lt;/author&gt;
  &lt;title&gt;Building a new app - Introduction&lt;/title&gt;
  &lt;description&gt;The introduction&lt;/description&gt;
  &lt;content&gt;This is ...
</code></pre>

<p>At first, I wanted to move each post individually whenever I could. After a week and pretty much nothing converted, I created a little .Net tool to make the conversion/migration much easier.</p>

<p>It&#8217;s a pretty basic windows form application that takes a path and output a bundle of simili-markdown (because the original posts are html, but, since markdown accept html, it&#8217;s fine) files that are compatible with the Octopress format.</p>

<p>It&#8217;s also generating a <strong>redirection.rb</strong> file that contains necessary code to be used by rack-rewrite to make necessary 301 redirection. It can be useful if you don&#8217;t want to write it all manually.</p>

<pre><code>use Rack::Rewrite do

    r301 %r{^/post/The-surprising-science-of-motivation-by-Dan-Pink.aspx?$}, '/blog/the-surprising-science-of-motivation-by-dan-pink'
    r301 %r{^/post/Building-a-new-application-Introduction.aspx?$}, '/blog/building-a-new-application-introduction'
    r301 %r{^/post/tight-deadlines.aspx?$}, '/blog/tight-deadlines'
    r301 %r{^/post/no-such-file-to-load-cucumberrailsactive_record-(LoadError).aspx?$}, '/blog/no-such-file-to-load-cucumberrailsactive_record-(loaderror)'
    r301 %r{^/post/Buying-games-on-Steam.aspx?$}, '/blog/buying-games-on-steam'
    r301 %r{^/post/AlternativeToNet-review.aspx?$}, '/blog/alternativetonet-review'
    r301 %r{^/post/Excellent-post-by-Uncle-Bob.aspx?$}, '/blog/excellent-post-by-uncle-bob'
</code></pre>

<p>You can grab the source here : <a href="https://github.com/sebastienlachance/BlogEngineToOctopress">BlogEngineToOctopres</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My starting Gemfile]]></title>
    <link href="http://sebastienlachance.com/blog/my-starting-gemfile/"/>
    <updated>2012-02-17T15:08:00-05:00</updated>
    <id>http://sebastienlachance.com/blog/my-starting-gemfile</id>
    <content type="html"><![CDATA[<p>This is how my Gemfile looks like at the moment. Continuous feedback with Guard and metrics to keep track on defects and best practices not used.</p>

<div><script src='https://gist.github.com/1855201.js?file='></script>
<noscript><pre><code>source 'https://rubygems.org'

gem 'rails', '3.2.1'
gem 'pg'
gem 'omniauth-twitter'
gem 'omniauth-facebook'
gem 'omniauth-google-oauth2'
gem 'omniauth-identity'

group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'
  gem 'uglifier',     '&gt;= 1.0.3'
end

gem 'jquery-rails'
gem 'skeleton-rails'
gem 'rails-backbone'
gem 'jasminerice'

gem 'rspec-rails', :group =&gt; [:development, :test]

group :development do 
  gem 'heroku'
  gem 'guard'
  gem 'guard-rspec'
  gem 'guard-jasmine'
  gem 'growl'
  gem 'metrical'
  gem 'fattr'         # for Metric_fu
  gem 'arrayfields'   # for Metric_fu
  gem 'map'           # for Metric_fu
  gem 'annotate', :git =&gt; 'git://github.com/ctran/annotate_models.git'
end

group :test do
  gem 'database_cleaner', :group =&gt; :test
  gem 'factory_girl_rails', :group =&gt; :test
end

gem 'bcrypt-ruby', '~&gt; 3.0.0'</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
