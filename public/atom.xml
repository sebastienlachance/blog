<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sebastien Lachance]]></title>
  <link href="http://sebastienlachance.com/atom.xml" rel="self"/>
  <link href="http://sebastienlachance.com/"/>
  <updated>2012-05-10T10:04:37-04:00</updated>
  <id>http://sebastienlachance.com/</id>
  <author>
    <name><![CDATA[Sebastien Lachance]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Assets Pipeline and missing assets]]></title>
    <link href="http://sebastienlachance.com/blog/rails-assets-pipeline-and-missing-assets/"/>
    <updated>2012-05-10T10:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/rails-assets-pipeline-and-missing-assets</id>
    <content type="html"><![CDATA[<p>I moved the entire <a href="http://www.guidedescommercesdebeauce.com">Guide des Commerces</a> from Rails 3.0.10 to Rails 3.2.3. I have to admit it, I was afraid of the assets pipeline and my first deployment attempt resulted in a lost afternoon and a bad case of stress. I had to revert back and lose some customer data (just my associate data).</p>

<p>The problem was that I tried to use the assets pipeline for half the application and let everything in the public folder for the second half (admin part). I&#8217;m pretty sure it is possible.</p>

<p>Now everything is moved and I am actually quite happy. One css and one js per page is finally a dream came true.</p>

<p>Anyway, what I really wanted to talk here is about one of the problems I had. When calling the assets precompile rake task, one compiled css file was missing. Like one of the manifest wasn&#8217;t read or executed.</p>

<p>When you have multiple manifest files (not called application.css or application.js), you actually have to tell which additionnal one to precompile.</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;administration.js&#39;</span><span class="p">,</span> <span class="s1">&#39;administration.css&#39;</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>One gotcha with scss manifest:</h2>

<p><strong>If you are using scss files as manifests</strong>, you need to use the compiled version.</p>

<p>Like this:</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;application.css&#39;</span> <span class="o">]</span>  <span class="c1"># this will not work, but no error will be thrown</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of:</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;application.css.scss&#39;</span> <span class="o">]</span>  <span class="c1"># this will not work, but no error will be thrown</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method decorators in Ruby]]></title>
    <link href="http://sebastienlachance.com/blog/method-decorators-in-ruby/"/>
    <updated>2012-05-01T08:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/method-decorators-in-ruby</id>
    <content type="html"><![CDATA[<p>While I was following the <a href="http://twitter.com/#!/search/%23railsconf">#railsconf</a> thread on Twitter, I heard some talking about method decorators with Ruby. I&#8217;ve always wondered if there was a way to emulate the <a href="http://www.codeguru.com/csharp/.net/article.php/c18741/Understanding-and-Using-NET-Attributes.htm">Attribute</a> we have in .NET.</p>

<p>Turns out it is possible (and with added value!). Using the <a href="https://github.com/michaelfairley/method_decorators">method_decorators gem</a> allow precisely that functionnality with some extras.</p>

<h2>Defining a decorator</h2>

<figure class='code'><figcaption><span>Defining a decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ADecorator</span> <span class="o">&lt;</span> <span class="no">MethodDecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">orig</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">orig</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This decorator actually does nothing, since we call the original method with supplied arguments and block (if provided).</p>

<h2>Using the decorator</h2>

<figure class='code'><figcaption><span>Using the decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AClass</span>
</span><span class='line'>  <span class="n">extends</span> <span class="no">MethodDecorators</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">+</span><span class="no">ADecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_something</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now do something before and after the call to  <strong>do_something</strong> and even modify the return value.</p>

<h2>A practical example</h2>

<p>I&#8217;ve had this little problem in .NET where I wanted to profile different method calls to see how much time they took to execute and send back the result via <a href="http://miniprofiler.com/">MiniProfiler</a>. For this, I wanted only to add an attribute to those methods. The only way I have found that possible without the use of an advanced profiling tool was to use <a href="http://www.sharpcrafters.com/postsharp/features">PostSharp</a> and it&#8217;s injecting code feature. The Attribute functionnality does not offer any kind of before and after hook on execution.</p>

<p>A custom implementation would look like this.</p>

<figure class='code'><figcaption><span>MiniProfiler Attribute with PostSharp and C#</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[Serializable]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProfilingAspectAttribute</span> <span class="p">:</span> <span class="n">OnMethodBoundaryAspect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">IDisposable</span> <span class="n">_profiler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">ProfilingAspectAttribute</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="nf">OnEntry</span><span class="p">(</span><span class="n">MethodExecutionArgs</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_profiler</span> <span class="p">=</span> <span class="n">MiniProfiler</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Step</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}.{1}&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="n">args</span><span class="p">.</span><span class="n">Method</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">Method</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="nf">OnExit</span><span class="p">(</span><span class="n">MethodExecutionArgs</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_profiler</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">_profiler</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>      <span class="n">_profiler</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PostSharp will inject the OnEntry and OnExit code at the start and at the end of the &#8220;decorated&#8221; method. By default, <strong>there is no way to achieve that easily</strong>.</p>

<p>With Ruby, the method_decorators gem and a custom profiler, it would look like this.</p>

<figure class='code'><figcaption><span>A custom profiling decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Profiling</span> <span class="o">&lt;</span> <span class="no">MethodDecorator</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">orig</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profiler</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="n">orig</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profiler</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">+</span><span class="no">Profiling</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method_to_be_profiled</span>
</span><span class='line'>    <span class="c1">#some complex calculations</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How nice is that?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Rails : assert_valid_keys]]></title>
    <link href="http://sebastienlachance.com/blog/learning-rails-assert-valid-keys/"/>
    <updated>2012-04-30T06:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/learning-rails-assert-valid-keys</id>
    <content type="html"><![CDATA[<p>While reading the source code of <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a>, I came accross this method and tried to find where in FactoryGirl it was defined.
Turns out it&#8217;s in Rails since version 3.0 (more specifically in active_support/core_ext/hash/keys).</p>

<p>It&#8217;s an instance method of the Hash class, and what it allows you to do is to throw an ArgumentError when an unknown key is found on the hash instance.</p>

<figure class='code'><figcaption><span>valid keys</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;joe&quot;</span><span class="p">,</span> <span class="ss">:phone</span> <span class="o">=&gt;</span> <span class="s1">&#39;555-5555&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">assert_valid_keys</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;joe&quot;</span><span class="p">,</span><span class="ss">:phone</span><span class="o">=&gt;</span><span class="s1">&#39;555-5555&#39;</span><span class="p">}</span>  <span class="c1"># no ArgumentError</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>missing key in hash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;joe&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">assert_valid_keys</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;joe&quot;</span><span class="p">}</span>  <span class="c1"># no ArgumentError</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>unknown key in hash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;joe&quot;</span><span class="p">,</span> <span class="ss">:phone</span> <span class="o">=&gt;</span> <span class="s1">&#39;555-5555&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">assert_valid_keys</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="no">ArgumentError</span><span class="p">:</span> <span class="no">Unknown</span> <span class="n">key</span><span class="p">:</span> <span class="n">phone</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://api.rubyonrails.org/classes/Hash.html#method-i-assert_valid_keys">assert_valid_keys</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Large-scale Javascript Application Architecture by Addy Osmani]]></title>
    <link href="http://sebastienlachance.com/blog/large-scale-javascript-application-architecture-by-addy-osmani/"/>
    <updated>2012-04-27T08:18:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/large-scale-javascript-application-architecture-by-addy-osmani</id>
    <content type="html"><![CDATA[<p>Sometime, great stuff just fall from sky. And this presentation is just what I needed. <a href="http://speakerdeck.com/u/addyosmani">Addy Osmani</a> (AOL) has made a presentation about <a href="http://speakerdeck.com/u/addyosmani/p/scaling-your-javascript-applications">large-scale javascript application architecture</a> and has made his slides public on <a href="http://speakerdeck.com/">Speaker Deck</a> (which by the way is great).</p>

<script async class="speakerdeck-embed" data-id="4ec3f44095903900510005cf" data-ratio="1.3333333333333333" src="http://sebastienlachance.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and nested classes]]></title>
    <link href="http://sebastienlachance.com/blog/ruby-and-nested-classes/"/>
    <updated>2012-04-24T07:45:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/ruby-and-nested-classes</id>
    <content type="html"><![CDATA[<h2>What does it looks like?</h2>

<pre><code>class Book
    class Page
    end
end
</code></pre>

<h2>What is the purpose of nested classes?</h2>

<p>It is useful when we want to group classes together instead of trying to keep them distinct. It make no sense in this example to have a standalone Page class without the Book class.</p>

<h2>How can we instantiate Page class?</h2>

<p>If we try to instantiate it normally:</p>

<pre><code>page = Page.new // will throw Uninitialized constant error
</code></pre>

<p>We get: Uninitialized constant Object::Page</p>

<p>Instead we need to use:</p>

<pre><code>page = Book::Page.new
</code></pre>

<h2>But why using :: ?</h2>

<p>Using :: is a way to access constant. Does it make sense? Yes, because nested classes are stored in constant from within the class.</p>

<pre><code>class A
    B = "A constant"
end
</code></pre>

<p>A::B will return &#8220;A constant&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What can we do with Enumerable#Inject?]]></title>
    <link href="http://sebastienlachance.com/blog/what-can-we-do-with-array-dot-inject/"/>
    <updated>2012-04-24T06:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/what-can-we-do-with-array-dot-inject</id>
    <content type="html"><![CDATA[<p>Combine all elements of an enumerable with the supplied block (or symbol)</p>

<pre><code>[1, 3, 5, 10].inject { |sum, el| sum + el }
</code></pre>

<p>What is happenning behid the scene is this:</p>

<pre><code>1 + 3  # 1. 
4 + 5  # 2. The value of the precedent operation is passed back into the block as the first argument.
9 + 10 # 3. And so on.
</code></pre>

<p>   #The result will be 19.</p>

<p>You can also pass an ininial value like this:</p>

<pre><code>[1,2,3].inject(10) { |sum, el| sum + el }

10 + 1
11 + 2
13 + 3
The result will be 16.
You can see it as (((10 + 1) + 2) + 3).
</code></pre>

<p>The initial value will serve as the first argument of the block.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterate over each line of a string in C#]]></title>
    <link href="http://sebastienlachance.com/blog/iterate-over-each-line-of-a-string-in-c-sharp/"/>
    <updated>2012-04-17T07:53:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/iterate-over-each-line-of-a-string-in-c-sharp</id>
    <content type="html"><![CDATA[<p>For future reference.</p>

<p>Easy way to go through each line of a string.</p>

<figure class='code'><figcaption><span>string iteration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">StringReader</span> <span class="n">reader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="p">(</span><span class="n">txt</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">((</span><span class="n">line</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">())</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&quot;do anything with the line);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC ActionLink with image]]></title>
    <link href="http://sebastienlachance.com/blog/asp-dot-net-mvc-actionlink-with-image/"/>
    <updated>2012-04-12T07:49:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/asp-dot-net-mvc-actionlink-with-image</id>
    <content type="html"><![CDATA[<p>It&#8217;s not as hard as it seems. This is a way to create a link with an image.</p>

<figure class='code'><figcaption><span>link to action with an image</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="p">=</span><span class="s">&quot;@Url.Action(&quot;</span><span class="n">Create</span><span class="s">&quot;, &quot;</span><span class="n">LogBooks</span><span class="s">&quot;)&quot;</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="p">=</span><span class="s">&quot;@Url.Content(&quot;</span><span class="p">~/</span><span class="n">Content</span><span class="p">/</span><span class="n">Images</span><span class="p">/</span><span class="n">create</span><span class="p">.</span><span class="n">png</span><span class="s">&quot;)&quot;</span> <span class="p">/&gt;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">a</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Skyrim - A really awesome video]]></title>
    <link href="http://sebastienlachance.com/blog/skyrim-a-really-awesome-video/"/>
    <updated>2012-04-11T06:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/skyrim-a-really-awesome-video</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve played more than a few hours of Skyrim, this is for you&#8230;</p>

<iframe width="853" height="480" src="http://www.youtube.com/embed/ALbQQzePzt4" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Completely unrealistic example - A Backbone Blog]]></title>
    <link href="http://sebastienlachance.com/blog/completely-unrealistic-example-a-backbone-blog/"/>
    <updated>2012-04-10T06:00:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/completely-unrealistic-example-a-backbone-blog</id>
    <content type="html"><![CDATA[<p>Last week, while I was playing and coding on my Backbone blog project (<a href="https://github.com/sebastienlachance/backbone-rails-blog">backbone-rails-blog</a>), I started wondering if it was something I could use to replace this blog, since I put so much time on it lately. But at the same time I kept telling myself, <strong>is Google going to index the content?</strong> The short answer is: <strong>NO</strong>, not now anyway.</p>

<p>The long answer goes like this: Facebook comments are indexed. So there should be a way to provide this content to GoogleBot. I have done my homework and this document, <a href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started">Making Ajax Applications Crawlable</a>) provides some answers. Basically, we need the <a href="http://en.wikipedia.org/wiki/Shebang_(Unix">hashbang</a>) url format. This is achieved with Backbone when we are not using pushstate.</p>

<p>Hashbang url:</p>

<pre><code>http://sebastienlachance.com#!blog-post
</code></pre>

<p>My urls:</p>

<pre><code>http://sebastienlachacne.com/blog-post
</code></pre>

<p>And frankly, I will not pursue this path. In my case anyway, it provides no real advantages to have an Ajax-powered blog.</p>

<p>In fact, I could have left Backbone and only use it on the admin backend, but as a learning tool, I didn&#8217;t want to revert back (and there is so much great blogging platform now anyway).</p>

<p>Do you have any other web apps ideas (other than a todo list or blog)? In my next iteration (that is, the next app), I will be using Backbone with NodeJs and MongoDB. Sounds fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Available]]></title>
    <link href="http://sebastienlachance.com/blog/available/"/>
    <updated>2012-04-06T15:12:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/available</id>
    <content type="html"><![CDATA[<p>I am now available to do freelance web development. Contract or on site.</p>

<p>I have experience in ASP.NET (MVC or WebForms) and Ruby On Rails. HTML, Javascript and CSS, no problem.</p>

<p>You can see my CV here (<a href="http://sebastienlachance.com/resume">CV</a>).</p>

<p>I can be on site if you are in the area or work remotely (I also have experience in that).</p>

<p>I am looking forward to accept new challenges and deliver WORKING solutions!</p>

<p>You can contact me here (<a href="http://twitter.com/slachance">Twitter</a>), (<a href="http://www.linkedin.com/in/sebastienlachance">LinkedIn</a>) or here (at sebastien.lachance creatiom.com).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disponible pour mandat de développement]]></title>
    <link href="http://sebastienlachance.com/blog/disponible/"/>
    <updated>2012-04-06T13:30:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/disponible</id>
    <content type="html"><![CDATA[<p>Je suis maintenant disponible pour des mandats de développement Web à la pige. Contrat ou sur place.</p>

<p>J&#8217;ai de l&#8217;expérience en ASP.NET (MVC ou WebForms) et Ruby On Rails. HTML, Javascript et CSS, aucun problème.</p>

<p>Vous pouvez consultez mon CV ici (<a href="http://sebastienlachance.com/resume">CV</a>).</p>

<p>Je peux me déplacer si vous êtes dans la région ou travailler à distance (j&#8217;ai aussi de l&#8217;expérience dans ça).</p>

<p>J&#8217;ai très hâte de relever de nouveaux défis et de livrer des solutions qui FONCTIONNENT.</p>

<p>Vous pouvez me contactez ici (<a href="http://twitter.com/slachance">Twitter</a>), ici (<a href="http://www.linkedin.com/in/sebastienlachance">LinkedIn</a>) ou ici (sebastien.lachance at creatiom.com).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rerun all Guards]]></title>
    <link href="http://sebastienlachance.com/blog/rerun-all-guards/"/>
    <updated>2012-03-30T15:16:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/rerun-all-guards</id>
    <content type="html"><![CDATA[<p>I have been searching this feature for a while and never realized it was built-in into Guard. Whenever I tried to rerun all with pressing enter, nothing happened. I didn&#8217;t realized I was because of an old gem version.</p>

<pre><code>Ctrl-r if you are on Guard version &lt; 7
</code></pre>

<p>and</p>

<pre><code>enter if you are on a more recent version
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help needed, A Backbone blog]]></title>
    <link href="http://sebastienlachance.com/blog/help-needed-a-backbone-blog/"/>
    <updated>2012-03-19T12:39:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/help-needed-a-backbone-blog</id>
    <content type="html"><![CDATA[<p>I&#8217;m currently doing my best to learn Backbone and his best practices. I have set up a demo blog application on GitHub (<a href="https://github.com/sebastienlachance/backbone-rails-blog">Backbone-rails-blog</a>).</p>

<p>So, if you are interested to give me some feedback, tips or check out the development progress, just watch the project to see where things are going and I&#8217;ll blog the important parts as I move forward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filling a select from an array on javascript object]]></title>
    <link href="http://sebastienlachance.com/blog/filling-a-select-from-an-array-on-javascript-object/"/>
    <updated>2012-03-13T12:11:00-04:00</updated>
    <id>http://sebastienlachance.com/blog/filling-a-select-from-an-array-on-javascript-object</id>
    <content type="html"><![CDATA[<p>As a reminder for my future self, here is how I fill a select from an array of javascript object.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/z9Q4R/embedded/js,resources,html,css,result/light/"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting a BlogEngine.Net blog to Octopress]]></title>
    <link href="http://sebastienlachance.com/blog/converting-a-blogengine-dot-net-blog-to-octopress/"/>
    <updated>2012-02-21T12:52:00-05:00</updated>
    <id>http://sebastienlachance.com/blog/converting-a-blogengine-dot-net-blog-to-octopress</id>
    <content type="html"><![CDATA[<p>Some months ago, I moved my BlogEngine.net blog (hosted on GoDaddy) to Octopress hosted on Heroku. I needed a tool to migrate all my posts and found nothing that could apply to my case (I&#8217;m pretty sure there is something out there, but I didn&#8217;t look very far and wanted to code the tool myself anyway).</p>

<p>Octopress blog post format look like this:</p>

<pre><code>---
layout: post
title: "Setting ComVisible"
date: 2005-01-19 14:46:00
comments: true
categories: 
---

** This is my post using Markdown **
</code></pre>

<p>My BlogEngine.Net was configured to use xml files to store posts. Which look like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;
&lt;post&gt;
  &lt;author&gt;SebastienLachance&lt;/author&gt;
  &lt;title&gt;Building a new app - Introduction&lt;/title&gt;
  &lt;description&gt;The introduction&lt;/description&gt;
  &lt;content&gt;This is ...
</code></pre>

<p>At first, I wanted to move each post individually whenever I could. After a week and pretty much nothing converted, I created a little .Net tool to make the conversion/migration much easier.</p>

<p>It&#8217;s a pretty basic windows form application that takes a path and output a bundle of simili-markdown (because the original posts are html, but, since markdown accept html, it&#8217;s fine) files that are compatible with the Octopress format.</p>

<p>It&#8217;s also generating a <strong>redirection.rb</strong> file that contains necessary code to be used by rack-rewrite to make necessary 301 redirection. It can be useful if you don&#8217;t want to write it all manually.</p>

<pre><code>use Rack::Rewrite do

    r301 %r{^/post/The-surprising-science-of-motivation-by-Dan-Pink.aspx?$}, '/blog/the-surprising-science-of-motivation-by-dan-pink'
    r301 %r{^/post/Building-a-new-application-Introduction.aspx?$}, '/blog/building-a-new-application-introduction'
    r301 %r{^/post/tight-deadlines.aspx?$}, '/blog/tight-deadlines'
    r301 %r{^/post/no-such-file-to-load-cucumberrailsactive_record-(LoadError).aspx?$}, '/blog/no-such-file-to-load-cucumberrailsactive_record-(loaderror)'
    r301 %r{^/post/Buying-games-on-Steam.aspx?$}, '/blog/buying-games-on-steam'
    r301 %r{^/post/AlternativeToNet-review.aspx?$}, '/blog/alternativetonet-review'
    r301 %r{^/post/Excellent-post-by-Uncle-Bob.aspx?$}, '/blog/excellent-post-by-uncle-bob'
</code></pre>

<p>You can grab the source here : <a href="https://github.com/sebastienlachance/BlogEngineToOctopress">BlogEngineToOctopres</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My starting Gemfile]]></title>
    <link href="http://sebastienlachance.com/blog/my-starting-gemfile/"/>
    <updated>2012-02-17T15:08:00-05:00</updated>
    <id>http://sebastienlachance.com/blog/my-starting-gemfile</id>
    <content type="html"><![CDATA[<p>This is how my Gemfile looks like at the moment. Continuous feedback with Guard and metrics to keep track on defects and best practices not used.</p>

<div><script src='https://gist.github.com/1855201.js?file='></script>
<noscript><pre><code>source 'https://rubygems.org'

gem 'rails', '3.2.1'
gem 'pg'
gem 'omniauth-twitter'
gem 'omniauth-facebook'
gem 'omniauth-google-oauth2'
gem 'omniauth-identity'

group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'
  gem 'uglifier',     '&gt;= 1.0.3'
end

gem 'jquery-rails'
gem 'skeleton-rails'
gem 'rails-backbone'
gem 'jasminerice'

gem 'rspec-rails', :group =&gt; [:development, :test]

group :development do 
  gem 'heroku'
  gem 'guard'
  gem 'guard-rspec'
  gem 'guard-jasmine'
  gem 'growl'
  gem 'metrical'
  gem 'fattr'         # for Metric_fu
  gem 'arrayfields'   # for Metric_fu
  gem 'map'           # for Metric_fu
  gem 'annotate', :git =&gt; 'git://github.com/ctran/annotate_models.git'
end

group :test do
  gem 'database_cleaner', :group =&gt; :test
  gem 'factory_girl_rails', :group =&gt; :test
end

gem 'bcrypt-ruby', '~&gt; 3.0.0'</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Startup Camp Quebec]]></title>
    <link href="http://sebastienlachance.com/blog/startup-camp-quebec/"/>
    <updated>2012-02-13T12:11:00-05:00</updated>
    <id>http://sebastienlachance.com/blog/startup-camp-quebec</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sebastienlachance.com/images/startupcampquebec.jpg" title="Startup Camp Québec" ></p>

<p>Jeudi dernier, avait lieu l&#8217;événement <a href="http://www.startupcampquebec.com">Startup Camp Québec</a>.</p>

<p>Je ne suis pas un habitué de ces événements même si j&#8217;ai <a href="http://www.guidedescommercesdebeauce.com">ma propre compagnie</a> et ait participé à quelques coktails et diners aux homards (j&#8217;aime pas le homard). C&#8217;était quand un monde nouveau avec de nouvelles personnes.</p>

<p>Il y avait 8 startups qui présentaient leur produits. J&#8217;ai bien aimé les présentations, et j&#8217;ai beaucoup accroché sur quelques projets. Particulièrement le projet Trapèze École de <a href="http://mx4.yolasite.com/">MX4</a>. Ils ont créer une manière de gérer les horaires dans les écoles, et ca, c&#8217;est ce que j&#8217;appelle trouver des solutions à un problème.</p>

<p>Mais le grand gagnant de cette édition est <a href="http://theriansaga.fatecraft.com/">FateCraft</a>, qui développe des jeux sociaux.</p>

<p>Je n&#8217;ai malheureusement pu rester jusqu&#8217;à la fin et voir la remise des prix. Mais je souhaite quand même bonne chance à toutes ces jeunes entreprises et puissent-elles continuer malgré toutes les embuches qui peuvent se présenter devant elles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Backbone - Day 1 impressions and basic concepts]]></title>
    <link href="http://sebastienlachance.com/blog/mastering-backbone-day-1-impressions/"/>
    <updated>2012-02-03T10:24:00-05:00</updated>
    <id>http://sebastienlachance.com/blog/mastering-backbone-day-1-impressions</id>
    <content type="html"><![CDATA[<p><img src="http://sebastienlachance.com/images/backbone.png" title="backbone.js" ></p>

<h2>Basics</h2>

<p>Previous experience:</p>

<p>I have no real hands-on experience. Only watched some screencasts.</p>

<p>I decided to create a little Todo app with Rails to make sure I understand the basics concepts correctly.</p>

<pre><code>gem 'rails-backbone'
gem 'jasminerice'

bundle install

rails g backbone:install
</code></pre>

<p>In the spec/javascripts/spec.js.coffee, add the following:</p>

<pre><code>#= require jquery
#= require underscore
#= require backbone
#= require backbone_rails_sync
#= require backbone_datalink
</code></pre>

<h2>Creating a model</h2>

<p>I created a todo.js file in the app/assets/javascript/backbone/models directory.</p>

<pre><code>window.Todo = Backbone.Model.extend({});
</code></pre>

<p>Pretty straightforward.</p>

<h2>Creating a collection</h2>

<pre><code>window.TodoList = Backbone.Collection.extend({
    model: Todo 
});
</code></pre>

<h2>Testing to ensure everything is fine</h2>

<p>To use <strong>jasminerice</strong>, start the rails server.</p>

<pre><code>rails s
</code></pre>

<p>Go to localhost:3000/jasmine.</p>

<div><script src='https://gist.github.com/1751477.js?file='></script>
<noscript><pre><code>describe(&quot;Todo Model&quot;, function() {
  it(&quot;can be instantiated&quot;, function() {
    var todo = new Todo();
    expect(todo).toBeTruthy();
  });

  it(&quot;has the description property&quot;, function() {
    var todo = new Todo();
    todo.set({ description: &quot;this is a description&quot;});
    expect(todo.get('description')).toEqual(&quot;this is a description&quot;);
  });

  it(&quot;has the done property&quot;,function() {
    var todo = new Todo();
    todo.set({ done: true});
    expect(todo.get('done')).toBeTruthy();
  })
});

describe(&quot;Todo List&quot;, function() {
  it(&quot;starts out empty&quot;, function() {
    var todoList = new TodoList();
    var todo = new Todo();
    expect(todoList.length).toEqual(0);
  });
  it(&quot;add elements as expected&quot;, function() {
    var todoList = new TodoList();
    var todo = new Todo();
    todoList.add(todo);
    expect(todoList.length).toEqual(1);
  });
  it(&quot;should be able to retrieve elements by index&quot;, function() {
    var todoList = new TodoList();
    var todo = new Todo();
    todoList.add(todo);
    var retrievedTodo = todoList.at(0);
    expect(retrievedTodo).toBe(todo);
  });
  it(&quot;should be able to remove elements&quot;, function() {
    var todoList = new TodoList();
    var todo = new Todo();
    todoList.add(todo);
    todoList.remove(todo);
    expect(todoList.length).toEqual(0);
  });

});</code></pre></noscript></div>


<h2>Creating a view</h2>

<p>To define a view, you call the extend method on Backbone.View.</p>

<pre><code>window.TodoList = Backbone.View.extend({});
</code></pre>

<p>A view is used ot render a model so we need to override the <strong>render</strong> method.</p>

<pre><code>window.TodoList = Backbone.View.extend({
    render: function() {
      //the interesting part happens here.
    }
});
</code></pre>

<p>The view is represented by an html element, I believe it&#8217;s a div you don&#8217;t specify it explicitely like this:</p>

<pre><code>window.TodoList = Backbone.View.extend({
    tagName: "section" //use a &lt;section&gt; tag
});
</code></pre>

<p>And a test to make sure it behave like I want:</p>

<pre><code>it("should be a section tag", function() {
  var view = new TodoListView();
  expect(view.el.nodeName).toEqual("SECTION");
});
</code></pre>

<p><strong>el</strong> represent the current view element.</p>

<p>In the render method, this is where you build the view markup, by appending one or more elements to the <strong>el</strong>.</p>

<pre><code>render: function() {
  $(el).html('&lt;h2&gt;Todos&lt;/h2&gt;');
}

//test

it("should render an h2 title', function() {
  var view = new TodoListView();
  view.render(); 
  expect(view.el.innerHTML).toEqual('&lt;h2&gt;Todos&lt;/h2&gt;');
}); 
</code></pre>

<p>But this is not really doing anything really exciting. I would like to display each todo in this view. We will need a view for individual Todo model.</p>

<pre><code>window.TodoView = Backbone.View.extend({
  tagName: 'li',
  render: function() {

  }
});
</code></pre>

<p>But how do we get a model into this view?</p>

<p>When you create an instance of the view you can pass a the model you will want to display. It will automagically added to the model property on the view.</p>

<pre><code>describe("TodoView", function() {
  it("initialization accept a model", function() {
    var todo = new Todo();
    var view = new TodoView({ model: todo });
    expect(view.model).toEqual(todo);
  });
});
</code></pre>

<p>Now I&#8217;m pretty sure I can render something in my TodoView render method.</p>

<pre><code>window.TodoView = Backbone.View.extend({ 
  tagName: 'li',
  render: function() {
    $(this.el).append(this.model.get('description'));
    return this;
  }
});
</code></pre>

<p>Now in my TodoListView I will loop through each Todo, render a view for each and appending them to the root element.</p>

<pre><code>window.TodoListView = Backbone.View.extend({
  tagName: 'section',
  render: function() {
    $(this.el).html('&lt;h2&gt;Todos&lt;/h2&gt;&lt;ul class="todo-items"&gt;&lt;/ul&gt;');
    var listContainer = $(this.el).find('.todo-items'); 
    this.collection.each(function(todo) {
      var view = new TodoView({model:todo}); 
      listContainer.append(view.render().el);
    });
    return this;
  }
});
</code></pre>

<p>Next post: Adding and removing todos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Backbone - Day 0]]></title>
    <link href="http://sebastienlachance.com/blog/mastering-backbone-day-0/"/>
    <updated>2012-02-02T19:42:00-05:00</updated>
    <id>http://sebastienlachance.com/blog/mastering-backbone-day-0</id>
    <content type="html"><![CDATA[<p><img src="http://sebastienlachance.com/images/backbone.png" title="backbone.js" ></p>

<p>I have now officially started the development for my new web application. I will not go into details right now, since everything is to be made, and a lot of very important decisions are to be made.</p>

<p>What I can say is that it will be a Web Application running on Rails. I&#8217;m still struggling on whether to use PostgresSQL, MySQL or MongoDB.</p>

<p>One of the big design decision was the choice of the client-side framework. I know I wanted a rich and fast user experience and to use Javascript heavily. So, I decided to go with <a href="http://documentcloud.github.com/backbone/" title="Backbone.js">Backbone</a>. And I have no experience with it apart from the <a href="http://peepcode.com/products/backbone-js" title="Backbone.js on Peepcode">Peepcode screencasts</a>.</p>

<p>I have no idea how to apply it to my application domain. It will be hard, but worth it.</p>

<h2>What is Backbone?</h2>

<p><strong>Backbone is a framework to create data-driven application in Javascript.</strong></p>

<p>As much as I love CoffeeScript, I will not use it to learn Backbone.</p>

<p>I will use Jasmine for testing.</p>

<h2>Why Backbone and not Knockout or any other javascript framework?</h2>

<p>From what I heard, Backbone is hard to learn, but from those who use it, it&#8217;s totally worth a try. And I heard so much great things from a lot of different developers. They couldn&#8217;t be all wrong.</p>

<p>So let&#8217;s get coding. Expect another blog post later for the first impressions.</p>
]]></content>
  </entry>
  
</feed>
